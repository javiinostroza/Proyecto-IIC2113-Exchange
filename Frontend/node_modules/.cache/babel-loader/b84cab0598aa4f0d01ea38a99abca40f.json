{"ast":null,"code":"class Api {\n  /* Mediates the interaction with the API through HTTP requests */\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n    this.baseHeaders = {\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    };\n  }\n\n  static async getAccessToken() {\n    const accessToken = window.localStorage.getItem('exchange-ten token');\n    if (!accessToken) return null;\n    return accessToken;\n  }\n\n  async authedHeaders() {\n    const accessToken = await Api.getAccessToken();\n    if (!accessToken) return this.baseHeaders;\n    return { ...this.baseHeaders,\n      Authorization: accessToken\n    };\n  }\n\n  async authFetch(path, {\n    method,\n    body,\n    headers\n  } = {\n    method: 'GET'\n  }) {\n    const authedHeaders = await this.authedHeaders();\n    return fetch(this.baseUrl + path, {\n      method,\n      headers: { ...authedHeaders,\n        ...headers\n      },\n      ...(body && {\n        body: JSON.stringify(body)\n      })\n    });\n  } // Login method. Returns true if success, else returns false.\n\n\n  async login(credentials) {\n    return this.authFetch('/login', {\n      method: 'POST',\n      body: credentials\n    }).then(async res => {\n      if (res.status === 200) {\n        const token = res.headers.get('Authorization');\n        window.localStorage.setItem('exchange-ten token', token);\n      }\n\n      return res.status === 200;\n    });\n  }\n\n}\n\nexport default new Api(process.env.REACT_APP_API_URL);","map":{"version":3,"sources":["/home/javiera/Documents/UNIVERSIDAD/2020-2/DiseÃ±o Detallado de Software/exchange-ten-secondary/src/api/index.js"],"names":["Api","constructor","baseUrl","baseHeaders","Accept","getAccessToken","accessToken","window","localStorage","getItem","authedHeaders","Authorization","authFetch","path","method","body","headers","fetch","JSON","stringify","login","credentials","then","res","status","token","get","setItem","process","env","REACT_APP_API_URL"],"mappings":"AAAA,MAAMA,GAAN,CAAU;AACR;AACAC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmB;AACjB,sBAAgB,kBADC;AAEjBC,MAAAA,MAAM,EAAE;AAFS,KAAnB;AAID;;AAED,eAAaC,cAAb,GAA8B;AAC5B,UAAMC,WAAW,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,oBAA5B,CAApB;AACA,QAAI,CAACH,WAAL,EAAkB,OAAO,IAAP;AAElB,WAAOA,WAAP;AACD;;AAED,QAAMI,aAAN,GAAsB;AACpB,UAAMJ,WAAW,GAAG,MAAMN,GAAG,CAACK,cAAJ,EAA1B;AACA,QAAI,CAACC,WAAL,EAAkB,OAAO,KAAKH,WAAZ;AAClB,WAAO,EACL,GAAG,KAAKA,WADH;AAELQ,MAAAA,aAAa,EAAEL;AAFV,KAAP;AAID;;AAED,QAAMM,SAAN,CAAgBC,IAAhB,EAAsB;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,MAA4B;AAAEF,IAAAA,MAAM,EAAE;AAAV,GAAlD,EAAqE;AACnE,UAAMJ,aAAa,GAAG,MAAM,KAAKA,aAAL,EAA5B;AACA,WAAOO,KAAK,CAAC,KAAKf,OAAL,GAAeW,IAAhB,EAAsB;AAChCC,MAAAA,MADgC;AAEhCE,MAAAA,OAAO,EAAE,EAAE,GAAGN,aAAL;AAAoB,WAAGM;AAAvB,OAFuB;AAGhC,UAAID,IAAI,IAAI;AAAEA,QAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AAAR,OAAZ;AAHgC,KAAtB,CAAZ;AAKD,GAjCO,CAmCR;;;AACA,QAAMK,KAAN,CAAYC,WAAZ,EAAyB;AACvB,WAAO,KAAKT,SAAL,CAAe,QAAf,EAAyB;AAC9BE,MAAAA,MAAM,EAAE,MADsB;AAE9BC,MAAAA,IAAI,EAAEM;AAFwB,KAAzB,EAGJC,IAHI,CAGC,MAAOC,GAAP,IAAe;AACrB,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAMC,KAAK,GAAGF,GAAG,CAACP,OAAJ,CAAYU,GAAZ,CAAgB,eAAhB,CAAd;AACAnB,QAAAA,MAAM,CAACC,YAAP,CAAoBmB,OAApB,CAA4B,oBAA5B,EAAkDF,KAAlD;AACD;;AAED,aAAOF,GAAG,CAACC,MAAJ,KAAe,GAAtB;AACD,KAVM,CAAP;AAWD;;AAhDO;;AAmDV,eAAe,IAAIxB,GAAJ,CAAQ4B,OAAO,CAACC,GAAR,CAAYC,iBAApB,CAAf","sourcesContent":["class Api {\n  /* Mediates the interaction with the API through HTTP requests */\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n    this.baseHeaders = {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    };\n  }\n\n  static async getAccessToken() {\n    const accessToken = window.localStorage.getItem('exchange-ten token');\n    if (!accessToken) return null;\n\n    return accessToken;\n  }\n\n  async authedHeaders() {\n    const accessToken = await Api.getAccessToken();\n    if (!accessToken) return this.baseHeaders;\n    return {\n      ...this.baseHeaders,\n      Authorization: accessToken,\n    };\n  }\n\n  async authFetch(path, { method, body, headers } = { method: 'GET' }) {\n    const authedHeaders = await this.authedHeaders();\n    return fetch(this.baseUrl + path, {\n      method,\n      headers: { ...authedHeaders, ...headers },\n      ...(body && { body: JSON.stringify(body) }),\n    });\n  }\n\n  // Login method. Returns true if success, else returns false.\n  async login(credentials) {\n    return this.authFetch('/login', {\n      method: 'POST',\n      body: credentials,\n    }).then(async (res) => {\n      if (res.status === 200) {\n        const token = res.headers.get('Authorization');\n        window.localStorage.setItem('exchange-ten token', token);\n      }\n\n      return res.status === 200;\n    });\n  }\n}\n\nexport default new Api(process.env.REACT_APP_API_URL);\n"]},"metadata":{},"sourceType":"module"}